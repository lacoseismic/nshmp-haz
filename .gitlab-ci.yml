variables:
  CI_REGISTRY: ${CODE_REGISTRY}
  CI_REGISTRY_IMAGE: ${CODE_REGISTRY_IMAGE}
  DOCKER_DIR: docker-images
  DOCKER_TAR: ${DOCKER_DIR}/app.tar
  FAULT_SECTIONS: nshm-fault-sections
  FAULT_SECTIONS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@code.usgs.gov/ghsc/nshmp/${FAULT_SECTIONS}.git
  IMAGE_NAME: ${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}
  JACOCO_HTML_DIR: build/reports/jacoco/test/html
  JUNIT_FILES: build/test-results/test/TEST-*.xml
  NSHMP_LIB: nshmp-lib
  NSHMP_LIB_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@code.usgs.gov/ghsc/nshmp/${NSHMP_LIB}.git

stages:
  - test
  - publish
  - deploy

####
# Template: GitLab runner tags
####
.dev-tags:
  tags:
    - development

####
# Templates:
#   - nshmp-lib: Download nshmp-lib repo
#   - fault-sections: Download nshm-fault-sections repo
#   - adjust-image-names: Update container image names
####
.templates:
  nshmp-lib: &nshmp-lib |-
    cd ..;
    rm -rf ${NSHMP_LIB};
    git clone ${NSHMP_LIB_GIT};
    cd ${CI_PROJECT_NAME};
  fault-sections: &fault-sections |-
    cd ..;
    rm -rf ${FAULT_SECTIONS};
    git clone ${FAULT_SECTIONS_GIT};
    cd ${CI_PROJECT_NAME};
  adjust-image-names: &adjust-image-names
    IMAGE_NAME=${IMAGE_NAME/:master/:latest};
    INTERNAL_IMAGE_NAME=${CI_REGISTRY_IMAGE}/${IMAGE_NAME};

####
# Template: Deploy to Docker Swarm
# Globals:
#   CODE_REGISTRY: Path to container registry
#   GENERIC_SWARM_DEPLOY_REPO: Path to swarm deploy container
#   CI_REGISTRY_IMAGE: Path to container image
####
.deploy:
  cache: {}
  image: ${CODE_REGISTRY}/ghsc/hazdev/cloud-formation/hazdev-build-runner:latest
  dependencies:
  before_script:
    - *adjust-image-names
    - docker pull ${INTERNAL_IMAGE_NAME}
  script:
    - git clone ${GENERIC_SWARM_DEPLOY_REPO} generic-deploy
    - export REGISTRY=${CI_REGISTRY_IMAGE}
    - cp -v
      generic-deploy/default.config.sh
      generic-deploy/default.funcs.sh
      generic-deploy/deploy.sh
      scripts/.
    - scripts/deploy.sh
  stage: deploy
  tags:
    - deploy
    - swarm
  variables:
    APP_NAME: nshmp-haz
    STACK_NAME: nshmp-haz

.staging:
  only:
    - master@ghsc/nshmp/nshmp-haz-v2
    - tags@ghsc/nshmp/nshmp-haz-v2

.staging01:
  tags:
    - staging01

.staging02:
  tags:
    - staging02

####
# Build jar file.
####
Build Project:
  stage: test
  image: gradle:jdk11
  extends: .dev-tags
  only:
    - merge_request
    - master@ghsc/nshmp/nshmp-haz-v2
    - tags@ghsc/nshmp/nshmp-haz-v2
    - production@ghsc/nshmp/nshmp-haz-v2
  before_script:
    - *nshmp-lib
  script:
    - ./gradlew assemble

####
# Run Spotless check.
####
Spotless Check:
  stage: test
  image: gradle:jdk11
  extends: .dev-tags
  only:
    - merge_request
    - master@ghsc/nshmp/nshmp-haz-v2
  before_script:
    - *nshmp-lib
  script:
    - ./gradlew spotlessCheck;

####
# Run Spotbugs main.
####
Spotbugs Main:
  stage: test
  image: gradle:jdk11
  extends: .dev-tags
  only:
    - merge_request
    - master@ghsc/nshmp/nshmp-haz-v2
  before_script:
    - *nshmp-lib
  script:
    - ./gradlew spotbugsMain;

####
# Run Spotbugs test.
####
Spotbugs Test:
  stage: test
  image: gradle:jdk11
  extends: .dev-tags
  only:
    - merge_request
    - master@ghsc/nshmp/nshmp-haz-v2
  before_script:
    - *nshmp-lib
  script:
    - ./gradlew spotbugsTest;

####
# Run tests.
# Globals:
#   JACOCO_HTML_DIR - Directory of Jacoco html reports
#   JUNIT_FILES - Path to all Junit html files
####
Unit Tests:
  stage: test
  image: gradle:jdk11
  extends: .dev-tags
  only:
    - merge_request
    - master@ghsc/nshmp/nshmp-haz-v2
    - tags@ghsc/nshmp/nshmp-haz-v2
    - production@ghsc/nshmp/nshmp-haz-v2
  coverage: '/Total.*?([0-9]{1,3})%/'
  before_script:
    - *fault-sections
    - *nshmp-lib
  script:
    - ./gradlew check
    - cat ${JACOCO_HTML_DIR}/index.html
  artifacts:
    paths:
      - ${JACOCO_HTML_DIR}
    reports:
      junit: ${JUNIT_FILES}

# ####
# # Build Docker image.
# # Globals:
# #   DOCKER_DIR - The directory to put Docker image
# #   DOCKER_TAR - The path to the Docker image tar
# #   FAULT_SECTIONS - nshm-fault-sections repo name
# #   IMAGE_NAME - Docker image name
# #   NSHMP_LIB - nshmp-lib repo name
# ####
# Build Image:
#   stage: test
#   image: docker:stable
#   extends: .dev-tags
#   only:
#     - merge_request
#     - master@ghsc/nshmp/nshmp-haz-v2
#     - tags@ghsc/nshmp/nshmp-haz-v2
#     - production@ghsc/nshmp/nshmp-haz-v2
#   before_script:
#     - *adjust-image-names
#     - rm -rf ${DOCKER_DIR}
#     - apk add git;
#     - *nshmp-lib
#     - mv ../${NSHMP_LIB} .
#     - *fault-sections
#     - mv ../${FAULT_SECTIONS} .
#   script:
#     - mkdir ${DOCKER_DIR}
#     - docker build -t local/${IMAGE_NAME} .
#     - docker save local/${IMAGE_NAME} > ${DOCKER_TAR}
#   artifacts:
#     paths:
#       - ${DOCKER_DIR}

# ####
# # Publish Docker image to GitLab registry.
# # Globals:
# #   CHS_PASSWORD - GitLab password
# #   CHS_USERNAME - GitLab username
# #   DOCKER_TAR - The path to the Docker image tar
# #   INTERNAL_IMAGE_NAME - GitLab registry Docker image name
# #   IMAGE_NAME - Docker image name
# ####
# Publish Image:
#   stage: publish
#   image: docker:stable
#   extends: .dev-tags
#   only:
#     - master@ghsc/nshmp/nshmp-haz-v2
#     - tags@ghsc/nshmp/nshmp-haz-v2
#     - production@ghsc/nshmp/nshmp-haz-v2
#   before_script:
#     - *adjust-image-names
#   script:
#     - echo "${CHS_PASSWORD}" | docker login --username ${CHS_USERNAME} --password-stdin ${CODE_REGISTRY}
#     - docker load -i ${DOCKER_TAR}
#     - docker tag local/${IMAGE_NAME} ${INTERNAL_IMAGE_NAME}
#     - docker push ${INTERNAL_IMAGE_NAME}
#     - docker image rm local/${IMAGE_NAME}
#     - docker image rm ${INTERNAL_IMAGE_NAME}
#     - rm -rf /root/.docker/config.json

# ####
# # Deploy to stage01
# ####
# Staging 01:
#   extends:
#     - .deploy
#     - .staging
#     - .staging01

# ####
# # Deploy to stage02
# ####
# Staging 02:
#   extends:
#     - .deploy
#     - .staging
#     - .staging02
