variables:
  JACOCO_HTML_DIR: ${REPORTS_DIR}/jacoco/test/html
  JUNIT_FILES: build/test-results/test/TEST-*.xml
  REPORTS_DIR: build/reports

# Do not run for merge requests
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

stages:
  - build
  - trigger

####
# Environment Templates
####

##
# Rule for development environment
##
.development-env: &development-env
  if: >
    $CI_PROJECT_PATH != $UPSTREAM_PATH
    || (
      $CI_PROJECT_PATH == $UPSTREAM_PATH
      && (
        $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
        && $CI_COMMIT_BRANCH != 'production'
        && $CI_COMMIT_TAG == null
      )
    )
  variables:
    ENVIRONMENT: development

##
# Rule for staging environment
##
.staging-env: &staging-env
  if: >
    $CI_PROJECT_PATH == $UPSTREAM_PATH
    && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    ENVIRONMENT: staging

##
# Rule for production envrionment
##
.production-env: &production-env
  if: >
    $CI_PROJECT_PATH == $UPSTREAM_PATH
    && (
      $CI_COMMIT_BRANCH == 'production'
      || ( $CI_COMMIT_TAG && $CI_COMMIT_TAG != '' )
    )
  variables:
    ENVIRONMENT: production

####
# Docker Templates
####

##
# Docker in Docker
##
.dind:
  image: ${DEVOPS_REGISTRY}docker:19.03-git
  services:
    - alias: docker
      name: ${DEVOPS_REGISTRY}docker:19.03-dind
  variables:
    DOCKER_DRIVER: overlay2

##
# Build Docker image and push to registry.
#
# Pushes to internal registry for all branches and Docker registry
# on default upstream and production upstream branches.
##
.docker-build:
  extends:
    - .dind
  needs: []
  rules:
    - *development-env
    - *staging-env
    - *production-env
  script:
    - BUILD_ARGS='';
    - |
      for arg in ${DOCKER_BUILD_ARGS}; do
        BUILD_ARGS="${BUILD_ARGS} --build-arg ${arg}";
      done
    - latest_image_name="${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}:latest";
    - env_image_name="${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}:${ENVIRONMENT}-latest";
    - |
      docker build \
        ${BUILD_ARGS} \
        --pull \
        --tag "${env_image_name}" \
        --file "${CI_PROJECT_DIR}/${DOCKERFILE}" \
        "${CI_PROJECT_DIR}/.";
    - docker push "${env_image_name}";
    - docker tag "${env_image_name}" "${latest_image_name}"
    - docker push "${latest_image_name}"
  stage: build
  tags:
    - build
  variables:
    DOCKERFILE: Dockerfile
    DOCKER_BUILD_ARGS: |
      BUILD_IMAGE=${DEVOPS_REGISTRY}usgs/amazoncorretto:11
      FROM_IMAGE=${DEVOPS_REGISTRY}usgs/amazoncorretto:11

####
# Java Templates
####

##
# General Java setup
##
.java:
  image: ${DEVOPS_REGISTRY}usgs/amazoncorretto:11
  stage: build
  tags:
    - development

####
# Stage: build
####

Build Image Haz:
  extends:
    - .docker-build
  variables:
    CI_PROJECT_NAME: nshmp-haz
    DOCKER_BUILD_ARGS: |
      BUILD_IMAGE=${DEVOPS_REGISTRY}usgs/amazoncorretto:11
      FROM_IMAGE=${DEVOPS_REGISTRY}usgs/amazoncorretto:11
      CI_JOB_TOKEN=${CI_JOB_TOKEN}
    UPSTREAM_PATH: ghsc/nshmp/nshmp-haz

Build Image WS:
  extends:
    - .docker-build
  variables:
    CI_PROJECT_NAME: nshmp-haz-ws
    DOCKER_BUILD_ARGS: |
      BUILD_IMAGE=${DEVOPS_REGISTRY}usgs/amazoncorretto:11
      FROM_IMAGE=${DEVOPS_REGISTRY}usgs/amazoncorretto:11
      CI_JOB_TOKEN=${CI_JOB_TOKEN}
    DOCKERFILE: ws.Dockerfile
    UPSTREAM_PATH: ghsc/nshmp/nshmp-haz

Build Project:
  extends:
    - .java
  script:
    - ./gradlew assemble

Markdown Lint:
  extends:
    - .java
  script:
    - ./gradlew markdownlint

Unit Tests:
  artifacts:
    paths:
      - ${JACOCO_HTML_DIR}
    reports:
      junit: ${JUNIT_FILES}
  coverage: '/Total.*?([0-9]{1,3})%/'
  extends:
    - .java
  script:
    - ./gradlew check
    - cat ${JACOCO_HTML_DIR}/index.html

####
# Stage: trigger
####

Trigger nshmp-haz-ws CDK:
  needs:
    - Build Image WS
  rules:
    -
      <<: *development-env
      when: manual
    - *staging-env
    - *production-env
  script:
    - apk add curl
    - |
      if [ "${ENVIRONMENT}" == 'production' ]; then
        REF="production";
      fi
    - |
      curl --request POST \
        --form token=${NSHMP_HAZ_WS_CDK_TRIGGER_TOKEN} \
        --form ref=${REF} \
        --form "variables[description]=Triggered by nshmp-haz" \
        --form "variables[ENVIRONMENT]=${ENVIRONMENT}" \
        --form "variables[TRIGGER_PASSCODE]=${NSHMP_HAZ_WS_CDK_TRIGGER_TOKEN}" \
        "https://${PRIVATE_GITLAB}/api/v4/projects/${NSHMP_HAZ_WS_CDK_PROJECT_ID}/trigger/pipeline"
  stage: trigger
  variables:
    REF: main
    UPSTREAM_PATH: ghsc/nshmp/nshmp-haz
