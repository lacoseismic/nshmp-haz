variables:
  # Image version to publish
  IMAGE_VERSION: "0.0.1"

  # Deployment image name
  DEPLOY_IMAGE: "${GITLAB_INNERSOURCE_REGISTRY}/ghsc/nshmp/images/${CI_PROJECT_NAME}"

  # Directory to put images
  DOCKER_DIR: docker-images

  # Path to image tar
  DOCKER_TAR: ${DOCKER_DIR}/app.tar

  # nshm-fault-sections repo
  FAULT_SECTIONS: nshm-fault-sections

  # nshm-fault-sections git url
  FAULT_SECTIONS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@code.usgs.gov/ghsc/nshmp/${FAULT_SECTIONS}.git

  # Directory of Jacoco html reports
  JACOCO_HTML_DIR: build/reports/jacoco/test/html

  # Path to all Junit html files
  JUNIT_FILES: build/test-results/test/TEST-*.xml

  # Local image name
  LOCAL_IMAGE: local/${CI_PROJECT_NAME}:${IMAGE_VERSION}

  # nshmp-lib repo
  NSHMP_LIB: nshmp-lib

  # nshmp-lib git url
  NSHMP_LIB_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@code.usgs.gov/ghsc/nshmp/${NSHMP_LIB}.git

stages:
  - build
  - test
  - publish

####
# GitLab runner tags
####
.tags:
  tags:
    - development

####
# Download nshmp-lib and nshm-fault-sections
####
.get-lib:
  nshmp-lib: &nshmp-lib |-
    cd ..;
    rm -rf ${NSHMP_LIB};
    git clone ${NSHMP_LIB_GIT};
    cd ${CI_PROJECT_NAME};
  fault-sections: &fault-sections |-
    cd ..;
    rm -rf ${FAULT_SECTIONS};
    git clone ${FAULT_SECTIONS_GIT};
    cd ${CI_PROJECT_NAME};

####
# Build jar file.
####
build project:
  stage: build
  image: gradle
  extends: .tags
  only:
    - merge_request
    - master@ghsc/nshmp/nshmp-haz-v2
  before_script:
    - *nshmp-lib
  script:
    - ./gradlew assemble

####
# Run tests.
# Globals:
#   (string) JACOCO_HTML_DIR - Directory of Jacoco html reports
#   (string) JUNIT_FILES - Path to all Junit html files
####
test project:
  stage: test
  image: gradle
  extends: .tags
  only:
    - merge_request
    - master@ghsc/nshmp/nshmp-haz-v2
  coverage: '/Total.*?([0-9]{1,3})%/'
  before_script:
    - *fault-sections
    - *nshmp-lib
  script:
    - ./gradlew check
    - cat ${JACOCO_HTML_DIR}/index.html
  artifacts:
    paths:
      - ${JACOCO_HTML_DIR}
    reports:
      junit: ${JUNIT_FILES}

####
# Build Docker image.
# Globals:
#   DOCKER_DIR - The directory to put Docker image
#   DOCKER_TAR - The path to the Docker image tar
#   LOCAL_IMAGE - Docker local image name
####
build image:
  stage: build
  image: docker:stable
  extends:
    - .tags
  only:
    - merge_requests
    - master@ghsc/nshmp/nshmp-haz-v2
  before_script:
    - rm -rf ${DOCKER_DIR}
    - apk add git;
    - *nshmp-lib
    - mv ../${NSHMP_LIB} .
    - *fault-sections
    - mv ../${FAULT_SECTIONS} .
  script:
    - mkdir ${DOCKER_DIR}
    - docker build -t ${LOCAL_IMAGE} .
    - docker save ${LOCAL_IMAGE} > ${DOCKER_TAR}
  artifacts:
    paths:
      - ${DOCKER_DIR}

####
# Publish Docker image to GitLab registry.
# Globals:
#   CHS_PASSWORD - GitLab password
#   CHS_USERNAME - GitLab username
#   DEPLOY_IMAGE - Docker image name for depolyment
#   DOCKER_TAR - The path to the Docker image tar
#   GITLAB_INNERSOURCE_REGISTRY - URL to registry
#   IMAGE_VERSION - The current version of the image to publish
#   LOCAL_IMAGE - Docker local image name
####
publish image:
  stage: publish
  image: docker:stable
  extends: .tags
  only:
    - master@ghsc/nshmp/nshmp-haz-v2
  script:
    - echo "${CHS_PASSWORD}" | docker login --username ${CHS_USERNAME} --password-stdin ${GITLAB_INNERSOURCE_REGISTRY}
    - docker load -i ${DOCKER_TAR}
    # Push current version
    - docker tag ${LOCAL_IMAGE} ${DEPLOY_IMAGE}:${IMAGE_VERSION}
    - docker push ${DEPLOY_IMAGE}:${IMAGE_VERSION}
    # Update latest tag
    - docker tag ${LOCAL_IMAGE} ${DEPLOY_IMAGE}:latest
    - docker push ${DEPLOY_IMAGE}:latest
    # Delete pass file
    - rm -rf /root/.docker/config.json
